name: Build and Release & Deploy

permissions:
  contents: write

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    if: |
      github.event_name == 'workflow_dispatch' || 
      github.event_name == 'push' || 
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Get release version
        id: get_version
        run: echo "RELEASE_VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Check release version
        run: echo "Release version is $RELEASE_VERSION"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "latest"

      - name: Install dependencies
        run: npm install --production

      - name: Validate wrangler.jsonc
        run: |
          # 验证wrangler.jsonc格式和配置
          node -e "
            try {
              const fs = require('fs');
              const content = fs.readFileSync('wrangler.jsonc', 'utf8');
              // 移除注释后解析JSON
              const jsonWithoutComments = content.replace(/\/\*[\s\S]*?\*\/|\/\/.*$/gm, '');
              const config = JSON.parse(jsonWithoutComments);
              
              // 验证source maps配置
              if (config.upload_source_maps === false) {
                console.log('✔ Source maps上传已禁用');
              } else {
                console.log('⚠ Source maps上传已启用');
              }
              
              // 验证兼容性日期
              const compatDate = new Date(config.compatibility_date);
              const currentDate = new Date();
              const daysDiff = Math.floor((currentDate - compatDate) / (1000 * 60 * 60 * 24));
              
              if (daysDiff > 30) {
                console.log('⚠ 兼容性日期较旧，建议更新到最新版本');
              } else {
                console.log('✔ 兼容性日期较新');
              }
              
              console.log('✔ wrangler.jsonc格式验证通过');
            } catch (error) {
              console.error('✖ wrangler.jsonc格式错误:', error.message);
              process.exit(1);
            }
          "

      - name: Build project
        run: npm run build

      - name: Read release note
        id: read_release
        shell: bash
        run: |
          r=$(cat RELEASE.md)         
          r="${r//'%'/'%25'}"                               
          r="${r//$'\n'/'%0A'}"                             
          r="${r//$'\r'/'%0D'}"                             
          echo "RELEASE_BODY=$r" >> $GITHUB_OUTPUT          

      - name: Upload Release Assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          tag: v${{ env.RELEASE_VERSION }}
          release_name: Release v${{ env.RELEASE_VERSION }}
          overwrite: true
          file_glob: true
          prerelease: ${{ github.ref != 'refs/heads/main' }}
          promote: ${{ github.ref == 'refs/heads/main' }}
          body: ${{ steps.read_release.outputs.RELEASE_BODY }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "latest"

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Update wrangler.jsonc with secrets
        run: |
          node -e "
            const fs = require('fs');
            let content = fs.readFileSync('wrangler.jsonc', 'utf8');
            content = content.replace(/__WORKER_NAME__/g, process.env.WORKER_NAME);
            content = content.replace(/__ACCOUNT_ID__/g, process.env.ACCOUNT_ID);
            content = content.replace(/__ZONE_ID__/g, process.env.ZONE_ID);
            content = content.replace(/__KV_ID__/g, process.env.KV_ID);
            fs.writeFileSync('wrangler.jsonc', content);
          "
        env:
          WORKER_NAME: ${{ secrets.CLOUDFLARE_WORKER_NAME }}
          ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          KV_ID: ${{ secrets.CLOUDFLARE_KV_ID }}

      - name: Deploy to Cloudflare Workers
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          # 使用最新wrangler命令格式部署
          wrangler deploy --name ${{ secrets.CLOUDFLARE_WORKER_NAME }} --env production
