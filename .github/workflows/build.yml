name: Build and Release & Deploy and Cleanup

permissions:
  contents: write
  actions: write

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */1 * * *'

jobs:
  build:
    if: |
      github.event_name == 'workflow_dispatch' || 
      (github.event_name == 'schedule' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Get release version
        id: get_version
        run: echo "RELEASE_VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Check release version
        run: echo "Release version is $RELEASE_VERSION"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "latest"

      - name: Install dependencies
        run: npm install --production

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            scripts/deploy.js
            package.json
            RELEASE.md
          retention-days: 1

      - name: Read release note
        id: read_release
        shell: bash
        run: |
          r=$(cat RELEASE.md)         
          r="${r//'%'/'%25'}"                               
          r="${r//$'\n'/'%0A'}"                             
          r="${r//$'\r'/'%0D'}"                             
          echo "RELEASE_BODY=$r" >> $GITHUB_OUTPUT          

      - name: Upload Release Assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: dist/*
          tag: v${{ env.RELEASE_VERSION }}
          release_name: Release v${{ env.RELEASE_VERSION }}
          overwrite: true
          file_glob: true
          prerelease: ${{ github.ref != 'refs/heads/main' }}
          promote: ${{ github.ref == 'refs/heads/main' }}
          body: ${{ steps.read_release.outputs.RELEASE_BODY }}

  deploy:
    needs: build
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Set up Node.js for deployment
        uses: actions/setup-node@v4
        with:
          node-version: "latest"

      - name: Install Cloudflare SDK
        run: npm install cloudflare@5.1.0

      - name: Deploy to Cloudflare Worker using SDK
        run: node scripts/deploy.js
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_WORKER_NAME: ${{ secrets.CLOUDFLARE_WORKER_NAME }}
          CLOUDFLARE_KV_NAME: ${{ secrets.CLOUDFLARE_KV_NAME }}

  cleanup:
    needs: [build, deploy]
    if: always() && (needs.build.result == 'success' || needs.build.result == 'failure')
    runs-on: ubuntu-latest

    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // 获取所有 artifacts
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: owner,
              repo: repo,
              per_page: 100
            });
            
            // 计算7天前的时间戳
            const sevenDaysAgo = new Date();
            sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 1);
            
            console.log(`正在清理 ${sevenDaysAgo.toISOString()} 之前的 artifacts...`);
            
            let deletedCount = 0;
            
            for (const artifact of artifacts.data.artifacts) {
              const createdAt = new Date(artifact.created_at);
              
              if (createdAt < sevenDaysAgo) {
                try {
                  await github.rest.actions.deleteArtifact({
                    owner: owner,
                    repo: repo,
                    artifact_id: artifact.id
                  });
                  console.log(`已删除 artifact: ${artifact.name} (ID: ${artifact.id})`);
                  deletedCount++;
                } catch (error) {
                  console.log(`删除 artifact ${artifact.name} 失败: ${error.message}`);
                }
              }
            }
            
            console.log(`清理完成，共删除了 ${deletedCount} 个旧的 artifacts`);
